// Time lapse script
sc = mm.getScriptController();
script_to_run = 
"C:/Users/OPMuser/Documents/micromanager/scripts_for_2_0_4colour/file_driven_acq_TimoutFudge_marz_filterwheel_singlecam_fret_timelapse.bsh";

double scan_spacing_hours = 0;
double scan_spacing_minutes = 2;

double scan_spacing_total_hours = scan_spacing_hours + scan_spacing_minutes/60;

double timelapse_duration_hours = 0;
double timelapse_duration_minutes = 10;

double timelapse_duration_total_hours = timelapse_duration_hours + timelapse_duration_minutes/60;

sleeptime = 1000;  // sleep time in ms before checking if ready to do a scan

n_scans = Math.ceil(timelapse_duration_total_hours/scan_spacing_total_hours);
long start_time = System.currentTimeMillis();

sc.message("timestamps expected: ");
for(n=0; n<n_scans; n++){
	sc.message(n*scan_spacing_total_hours*1000 + "s");
}
for(n=0; n<n_scans; n++){
	while(System.currentTimeMillis() - start_time < n*scan_spacing_total_hours*1000*3600){
		Thread.sleep(sleeptime);
	}
	// turn this into a function
	sc.message("time started: " + (System.currentTimeMillis() - start_time)/1000 + "s");
	source(script_to_run);
	sc.message("time finished: " + (System.currentTimeMillis() - start_time)/1000 + "s");
	if (System.currentTimeMillis() - start_time > (n+1)*scan_spacing_total_hours*1000*3600){
		sc.message("WARNING, scan time was longer than scan spacing - running behind");
	}
}


