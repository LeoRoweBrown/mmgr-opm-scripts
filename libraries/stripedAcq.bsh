import org.micromanager.PositionList;
import org.micromanager.MultiStagePosition;
import org.micromanager.StagePosition;
import org.micromanager.internal.utils.MMException;

// Functions for striped acquisition size defined by bounds
// of a position list
///////////////////////////////////////////////////////////


// no support for varargs in beanshell, takes a params array for now
// returns the arrays instead of mutating like in the old version
// CURRENTLY NOT IMPLEMENTING Y SNAKE BECAUSE FOR SOME REASON CAMERA FAILS TO 
// ACQUIRE IMAGES FOR THE DATASTORE IN MICRO-MANAGER CAUSING A NULL POINTER ERROR
// THEN THE STAGE SOFTWARE CRASHES AT LEAST IN MICRO-MANNAGER AND I HAVE TO RESET
// THE SOFTWARE OR THE TANGO BOX...
int[][] convertCtrStripesSnake(double[] params, String savedir) {
	// Update positions for striped acquisition after generating the X Z
	// positions in generateStripesPosXZ, then set the y_bg and y_end
	// based on the full range of y obtained from getScanRangeY
	PositionList pl;
	
	if (params.length == 2){ // opm angle, stripe_overlap
		pl = generateStripesPosXZ((int)params[0], params[1]);
	}
	else if ( params.length == 3){ // [same as length 2], y_range
		pl = generateStripesPosXZ((int)params[0], params[1], (int)params[2]);
	}
	else if (params.length == 6){ // px_size, img_width, img_height, [same as length 2], y_range
		pl = generateStripesPosXZ(params[0], (int)params[1], (int)params[2], 
								 (int)params[3], params[4], (int)params[5]);
	}
	else{
		throw new MMException("Invalid number of parameters given to convertCtrStripesSnake");
	}
	// positionList
	if (!savedir.equals("NULL")) pl.save(savedir + "/stripes.pos");
	
	int[] yc_and_range = getScanRangeY();
	int yc = yc_and_range[0];
	int y_range_calc = yc_and_range[1];
	// (half) Y scan range
	
	y_half_range = y_range_calc/2;
	
	print("in convertCtrStripesSnake");
	// pl = mm.positions().getPositionList();
	// pl = gui.getPositionList();
	n = pl.getNumberOfPositions();

	int[] x_pos = new int[n];
	int[] f_pos = new int[n];
	int[] y_bg = new int[n];
	int[] y_end = new int[n];

	for (i=0; i < n; i++) {
	    mp = pl.getPosition(i);
	    
		x = (int) Math.floor(mp.getX()); 
		y = (int) Math.floor(mp.getY()); 
		f = (int) Math.floor(mp.getZ()); 
	
		x_pos[i] = x;
		// even n y scans low to high, vice versa for odd (snaked scan)
		// print(n);
		// print(y_bg);
		// Y SNAKING BREAKS THE STAGE HAVE TO DISABLE IT BY SETTING i = 0
		// y_bg[i] = y - (1 - 2*(i%2)) * y_half_range;
		// y_end[i] = y + (1 - 2*(i%2)) * y_half_range; 
		y_bg[i] = y - y_half_range;
		y_end[i] = y + y_half_range; 
		f_pos[i] = f;
	}
	int[][] posArray = {f_pos, x_pos, y_bg, y_end};
	
	return posArray; 
}

int[][] convertCtrStripesSnake(double[] params) {
	String savedir = "NULL";
	convertCtrStripesSnake(params, savedir);
}
	

PositionList generateStripesPosXZ(double px_size, int img_width, int img_height, int opm_angle, 
	double overlap, int yrange) {
	// Creates list of positions for striped acquisition for x and z (y is continuous)
	// Parameters:
	// <int> yc: centre of stripes in y, assumes all stripes are same in y
	// <float> px_size: (Isotropic) pixel size in sample space [default: 0.25(um)]
	// <int> img_width: Acquired image width in pixels [default: 1280(px)]
	// <int> img_height: Acquired image height in pixels [default: 1000(px)]
	// <int> opm_angle: OPM angle in degrees
	// <float> overlap: fraction of spatial overlap between stripes
	sc = mm.getScriptController();
	pl = mm.positions().getPositionList();
	n = pl.getNumberOfPositions();
	
	print("Generating positions with: ");
	print("px_size = " + px_size); 
	print("img_height = " + img_height); 
	print("img_width = " + img_width); 
	print("opm_angle = " + opm_angle); 
	print("overlap = " + overlap);
	print("yrange (if applicable) = " + yrange);
	
	int[] yc_and_range = getScanRangeY();
	int yc = yc_and_range[0];
	int y_range_calc = yc_and_range[1];
	
	if (yrange == 0 && y_range_calc == 0){
		throw new MMException("Range of Y values in position list equal to zero,"
							+ " supply generateStripesPosXZ with nonzero yrange or update position list");
	}
	if (n < 1){
		throw new MMException("Invalid number of positions! Need at least 1!");
	}
	
	int x; int z;
	
	// x z in this array
	int[] max_pos = { -1e6, -1e6 };
	int[] min_pos = { 1e6, 1e6 };
	
	// get maximum x and z in position list
	for (i=0; i < n; i++) {
	    mp = pl.getPosition(i);
	    
		x = (int) Math.floor(mp.getX());  // x
		z = (int) Math.floor(mp.getZ());  // z	
		
		max_pos[0] = Math.max(x, max_pos[0]);
		max_pos[1] = Math.max(z, max_pos[1]);
		
		min_pos[0] = Math.min(x, min_pos[0]);
		min_pos[1] = Math.min(z, min_pos[1]);
	}
	// now compute the new pos list for x and z
	
	// Extent of light sheet converted to sample coords, we just ignore y 
	float sheet_fov_x = img_height*px_size;
	float sheet_fov_z = img_width*px_size*Math.sin(Math.PI/180.0 * opm_angle);

	// get range 
	int x_range = max_pos[0] - min_pos[0];
	int z_range = max_pos[1] - min_pos[1];
	
	// get the separation between stripes in x and z
	int x_step = Math.round(sheet_fov_x * (1-overlap));
	int z_step = Math.round(sheet_fov_z * (1-overlap));
	
	// number of positions (+1 for the initial position?)
	n_x = (int) Math.ceil( (double)x_range/(double)x_step ) + 1;
	n_z = (int) Math.ceil( (double)z_range/(double)z_step ) + 1;

	print("x_step = " + x_step);
	print("z_step = " + z_step);
	print("x_range = " + x_range);
	print("z_range = " + z_range);
	
	sc.message("n_x " + n_x);
	sc.message("n_z " + n_z);
	 
	// if only one position in axis i.e. range = 0, make n = 1
	// n_x = (n_x == 0) ? 1 : n_x;
	// n_z = (n_z == 0) ? 1 : n_z;
	
	int[] x_list = new int[n_x];
	int[] z_list = new int[n_z];

	for (n=0; n < n_x; n++) {
		x_list[n] = min_pos[0] + n * x_step;
	}
	sc.message("Min and max values from x position list are " + min_pos[0] + " and " + max_pos[0]);
	sc.message("Min and max values from x calculated are " + x_list[0] + " and " + x_list[n_x - 1]);
	for (n=0; n < n_z; n++) {
		z_list[n] = min_pos[1] + n * z_step;
	}
	sc.message("Min and max values from z position list are " + min_pos[1] + " and " + max_pos[1]);
	sc.message("Min and max values from z calculated are " + z_list[0] + " and " + z_list[n_z - 1]);
	// set the position list in micromanager
	pl = _calcStripesPositionList(x_list, yc, z_list);
	
	return pl;
}

PositionList generateStripesPosXZ(int opm_angle, double overlap, int yrange) {
	// overloaded version of generateStripesPosXZ with default parameters
	return generateStripesPosXZ(0.25, 1280, 1000, opm_angle, overlap, yrange);
}

PositionList generateStripesPosXZ(int opm_angle, double overlap) {
	// overloaded version of generateStripesPosXZ with default parameters and 
	// with no yrange input - yrange is only needed when the range of y is zero due to pos list.
	return generateStripesPosXZ(0.25, 1280, 1000, opm_angle, overlap, 0);
}

PositionList _calcStripesPositionList(int[] x_list, int yc, int[] z_list){
	// [Internal function] Sets the position list based on the generated list of positions from generateStripesPosXZ
	// and central y (yc) and y range obtained from getScanRangeY
	mmc = mm.getCMMCore();
	pl = new PositionList();
	xyStage = mmc.getXYStageDevice();
	zStage = mmc.getFocusDevice();
	MultiStagePosition msp;
	// create the full list of coordinates, want it to scan in x (and y) then z
	int total_length = z_list.length*x_list.length;
	print("generated position list length: " + total_length);
	int [] x_pos = new int[total_length];
	int [] z_pos = new int[total_length];
	int [] y_pos = new int[total_length];
	int j_ = 0;
	
	boolean flip_x = false;
	//boolean flip_y = false;
	int n = 0;
	for (i = 0; i<z_list.length; i++) {
		for (j = 0; j<x_list.length; j++) {
			if (flip_x){ 
				j_ = x_list.length - j - 1;
			} else {
				j_ = j;
			}
			
			z_pos[n] = z_list[i];
			x_pos[n] = x_list[j_];
			y_pos[n] = yc;
			
			msp = new MultiStagePosition(xyStage, x_pos[n], y_pos[n], zStage, z_pos[n]);
			msp.setLabel("Pos" + n);

			pl.addPosition(msp);
			// flip_y ^= flip_y;
			n++;
		}
		// flip the x_list to minimise stage travel time, i.e.:
		// stripe(x1, z1) -> stripe(x..., z1) -> stripe(xn, z1) |
		// stripe(x1, z2) <- stripe(x..., z2) <- stripe(xn, z2) v
		
		// instead of
		// stripe(x1, z1) -> stripe(x..., z1) -> stripe(xn, z1) |
		// |<----------------------------------------------------v
		// v-> stripe(x1, z1) -> stripe(x..., z1) -> stripe(xn, z1) 
		
		flip_x != flip_x;
	}
	// TO DO: ////////////////////////////////////////////////
	// set labels to tell convertCtrStripes to reverse y scan
	// for each stripe for faster scanning like I do with x.
	//////////////////////////////////////////////////////////
	
	// return the position list
	return pl;
	// mm.positions().setPositionList(pl);
}

int[] getScanRangeY(){
	// Get the y range over which each stripe scans in y based on position list and y centre.
	// Run this before generateStripesPosXZ to get dist_from_ctr used in generateStripesPosXZ	
	int y;
	int max_y = -1e6;
	int min_y = 1e6;
	// NB: is beanshell dynamically typed ?
	
	pl = mm.positions().getPositionList();
	n = pl.getNumberOfPositions();
	print("Found " + n + " positions");
	
	for (i=0; i < n; i++) {
	    mp = pl.getPosition(i);
		y = (int) Math.floor(mp.getY());
		// print("y = " + y);
		max_y = Math.max(y, max_y);
		min_y = Math.min(y, min_y);
	}
	int y_range = max_y - min_y;
	int y_centre = Math.round(max_y + min_y)/2;
	
	int[] centre_and_range = {y_centre, y_range};
	print("y_min " + min_y + " y_max " + max_y);
	print("y_centre " + y_centre + " y_range " + y_range);
	return centre_and_range;

}

int savePosToFile(String dir, int[][] posArray){
	// human readable csv of positions
	StringBuilder sb = new StringBuilder();
	sb.append("f_pos,");
	sb.append("x_pos,");
	sb.append("y_bg,");
	sb.append("y_end\n");
	for(int i = 0; i < posArray[0].length; i++)//for each row
	{
		for(int j = 0; j < 4; j++)//for each column
		{
			sb.append(posArray[j][i]+"");//append to the output string
			if(j < 3)
				sb.append(",");//csv, comma not added for last element tho
		}
		sb.append("\n");//append new line at the end of the row
	}
	BufferedWriter writer = new BufferedWriter(new FileWriter(dir));
	writer.write(sb.toString());
	writer.close();
	print("Saved CSV of positions for stripes in " + dir);
	return 0;
}