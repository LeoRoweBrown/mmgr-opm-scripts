import org.micromanager.data.Datastore;
//import org.apache.commons.io.FileUtils

Datastore[] acqImagesFromBuffer(datastores, conds, camNames, coordsBuilder, max_dropped, logbuffer){
	// datastores is array of the initialised datastores, conds is max frames numbers, camNames is
	// camera names in MM, coordsBuilder object array (see MM docs), max_dropped is max allowed 
	// dropped frames before raising error, logbuffer is a StringBuffer that contains log messages
	
	// only works for acquire after each field, moved from the main script 
	// print("updated tictoc");
	TicToc=1000;
	HangExit=0;
	int[] ctrs = new int[datastores.length];
	java.util.Arrays.fill(ctrs, 0);
	
	Tic=System.currentTimeMillis();
	counterCondition = true;
	total_images_missing = 0;
	while(counterCondition && HangExit == 0) {

		Toc=System.currentTimeMillis();

		if ( ( Toc-Tic ) < TicToc ) 
		{
			
			if (mmc.getRemainingImageCount() > 0) {
				// print("Images in buffer");
				TaggedImage img = mmc.popNextTaggedImage();	
				camName = img.tags.getString("Camera");
				// print("cam name = " + camName);
				int i = 0;
				while(i<camNames.length){
					// print(i);
					if (camName.equals(camNames[i])) {
						// print("cam found");
						break;
					}
					i++;
				}
				if (i == camNames.length){
					print("Camera not found");
					throw new MMException("Camera not found");
				}
				// print("CamName " + camName);
				Image tmp = mm.data().convertTaggedImage(img);
				// print("camlength" + camNames.length);
				// print(ctrs);
				// print(i);
				// print(ctrs[i]);
				coordsBuilder[i] = coordsBuilder[i].p(ctrs[i]);
				tmp = tmp.copyAtCoords(coordsBuilder[i].build());
					
				datastores[i].putImage(tmp);
				// gui.addImageToAcquisition(acq_rfl, ctrs[1], 0, 0,0,img);
				ctrs[i]++;
				Tic=System.currentTimeMillis();
			} 
		} else {
			print("Reached acq time limit");
			HangExit=1;
		}
		// print("Checking counters");
		// are all images acquired?
		total_images_missing = 0;
		for(i=0; i<conds.length; i++){
			counterCondition = false;
			total_images_missing += conds[i] - ctrs[i];
			// if all counters reach the requried value then counterCondition stays 0 and loop finishes
			if (ctrs[i] < conds[i]){
				// print("Counter condition set to true");
				// print("Counter = " + ctrs[i] + " cond = " + conds[i]);
				counterCondition = true;
			}
		}
	}
	// Idea is that it waits until all expected images are obtained, but if it times out
	// it allows a max total number of dropped frames (max_dropped)
	logbuffer.append("dropped: " + total_images_missing);
	if (HangExit == 1){
		if (total_images_missing > max_dropped){
			print("Acquisition hanged and exceeded max dropped frames (" + max_dropped + ")");
			logbuffer.append(" (ERROR) max: " + max_dropped + "\n");
			throw new MMException("Acqusition hanged: no images found in buffer in time");
			// return datastores;
		}
		else if (total_images_missing > 0){  // probably dont need if
			sc.message("WARNING: Acquired with " + total_images_missing + " dropped frames");
		}
	}
	else {
		sc.message("Acquired with no dropped frames");
	} // since error is raised in HangExit == 1 need to end line
	logbuffer.append("\n");

	return datastores;  // not needed? the datastores array is mutated // remove later and test
}

Datastore[] acqImagesFromBuffer(datastores, conds, camNames, coordsBuilder, max_dropped){
	BufferedWriter logfile_dummy;  // created and lost in this scope
	acqImagesFromBuffer(datastores, conds, camNames, coordsBuilder, max_dropped, logfile_dummy);
}

Datastore createDatastore(cam_name, savedir, overwrite){
	// just CAN NOT delete the directory in java for some reason
	// so have to do a terrible alternative
	Datastore img_ds;
	fileSaveFolderDir = savedir + "/";
	// overwrite if retrying for example
	new File(fileSaveFolderDir).mkdirs();
	
	System.gc();
	
	try {
		// data() is datamanager
		// new File(fileSaveFolderDir).mkdirs();
		full_dir = fileSaveFolderDir + cam_name + "/";
		File dir = new File(full_dir);
		
		if (dir.isDirectory()){
			if (!overwrite){
				throw new IOException("File already exists, use overwrite=true "+
				"when calling createDatastore if you want to overwrite");
			}
			sc.message("Overwriting stacks in " + full_dir);
			file_names = new File(full_dir).list();
			
			for(i=0; i<file_names.length; i++){ 
				File file = new File(full_dir + file_names[i]);
				if(file.isFile()){
					if (file.delete()){
						sc.message("Successfully deleted " + file_names[i]);
					} else {
						sc.message("Failed to delete file " + file_names[i]);
					}
				}
			}
			// now delete dir
			if (! dir.delete()){
				print("Failed to delete directory, check if all files were deleted first");
			}
		}
		sc.message("Creating TIFF stack in " + full_dir);
		img_ds = mm.data().createMultipageTIFFDatastore(full_dir, false, false);
		
	} catch (IOException ex) {
		mmlog = mm.getLogManager();
		mmlog.logError(ex, "Error creating datastore in" + fileSaveFolderDir + cam_name + "/");
		sc.message("Error in creating datastore for " + cam_name + "!");
		throw(ex);
		// return ex;
	}
	sc.message("Successfully created datastores!");
	return img_ds;
}

Datastore createDatastore(cam_name, savedir){
	createDatastore(cam_name, savedir, false);
}


int closeAndSaveAcq(acq_rfl,cam_rfl,reflect_dir,acq_str,cam_str,straight_dir,run,field,acq_type) {	
	
		labviewFileAcqStop(filedir);

		mmc.stopSequenceAcquisition(cam_rfl); //stop in MM
		mmc.stopSequenceAcquisition(cam_str); //stop in MM
		mmc.setProperty(cam_rfl, "Triggermode","Internal"); // stop in the camera
		mmc.setProperty(cam_str, "Triggermode","Internal"); // stop in the camera
	
		save_bg = System.currentTimeMillis();	

		if (acq_type == 1) // save_per_field 
			end_dir = "run_" + index + "/field_" + field + "/";
		else
			end_dir = "run_" + index + "/";
			
		// acq_rfl has been created first... there must be a better way than chance...
		gui.getAcquisition(acq_str);  		
		new File(straight_dir + end_dir).mkdirs();		
		ij.IJ.run("Image Sequence... ", "format=TIFF name=run_" + index + "_ start=0 digits=5 save=" + straight_dir + end_dir);
		gui.getAcquisition(acq_str).promptToSave(false);
		ij.IJ.run("Close"); 
	
		gui.getAcquisition(acq_rfl);  // probably unnecessary if you save right after acquisition
		// name: common stem,  digits: number of digits for the indices, save: name of the first image
		new File(reflect_dir + end_dir).mkdirs();
		ij.IJ.run("Image Sequence... ", "format=TIFF name=run_" + index + "_ start=0 digits=5 save=" + reflect_dir + end_dir);
		gui.getAcquisition(acq_rfl).promptToSave(false); //just so it doesn't ask every time - DEPRECATED
		ij.IJ.run("Close"); 
		
		save_end = System.currentTimeMillis();
		run_t = Math.max(0,Math.round((save_end - save_bg)/1000)); // seconds
		sc.message("Saving took " + run_t + "s");	

		return 0;
}