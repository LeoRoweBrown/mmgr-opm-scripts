int setUpStage(trg_dist,scan_speed) {
	mmc.setSerialPortCommand("COM1","!trigm 1","\r");
	mmc.setSerialPortCommand("COM1","!triga y","\r");
	mmc.setSerialPortCommand("COM1","!dim 1 1","\r"); // dimensions in microns
	mmc.setSerialPortCommand("COM1","!trigs 500","\r"); // size of the trigger, microsecond
	mmc.setSerialPortCommand("COM1","!trigd " + trg_dist,"\r");// microns
	mmc.setSerialPortCommand("COM1","!trig 1","\r"); 

	mmc.setProperty(stageName, "SpeedX [mm/s]",scan_speed);
	mmc.setProperty(stageName, "SpeedY [mm/s]",scan_speed);
	return 0;
}

int setUpFocus() {
	// max pos speed 256
	// max accel 500
	// micro-step 4
/*		mmc.setSerialPortCommand("COM4", "A SAP 140, 0, 4","\r") ;
		String ret = mmc.getSerialPortAnswer("COM4", "\r");
		mmc.setSerialPortCommand("COM4", "A SAP 4, 0, 256","\r") ;
		ret = mmc.getSerialPortAnswer("COM4", "\r");
		mmc.setSerialPortCommand("COM4", "A SAP 5, 0, 500","\r") ;
		ret = mmc.getSerialPortAnswer("COM4", "\r");
		// Set up the encoder pre-scaler so that MVP is given the right value
		mmc.setSerialPortCommand("COM4", "A SAP 210, 0, 1600","\r") ;
		ret = mmc.getSerialPortAnswer("COM4", "\r");	
		mmc.setSerialPortCommand("COM4", "A SAP 1, 0, 0","\r") ;
		ret = mmc.getSerialPortAnswer("COM4", "\r");	*/
// Everything should have been set up in the device adapter
	print("Check focus was set up");
		return 0;
}

int waitForZ() {
	mmc.setSerialPortCommand("COM4", "A GAP 8, 0","\r") ;
	String foc_stat = mmc.getSerialPortAnswer("COM4", "\r");
	while( foc_stat.charAt(7) == '0') {
		mmc.setSerialPortCommand("COM4", "A GAP 8, 0","\r") ;
		foc_stat = mmc.getSerialPortAnswer("COM4", "\r");
		Thread.sleep(100);  // 10 Hz polling rate
	}
	return 0;
}

int waitForZnew() {
	print("hereZ");
	mmc.setSerialPortCommand("COM4","!statusaxis","\r"); 
	status = mmc.getSerialPortAnswer("COM4","\r"); 
	while(status.charAt(0) == 'M' || status.charAt(1) == 'M') {
		mmc.setSerialPortCommand("COM4","!statusaxis","\r"); 
		status = mmc.getSerialPortAnswer("COM4","\r"); 
		Thread.sleep(100);  // 10 Hz polling rate
	}	
	return 0;
}

int waitForXY() {
	mmc.setSerialPortCommand("COM1","!statusaxis","\r"); 
	status = mmc.getSerialPortAnswer("COM1","\r"); 
	while(status.charAt(0) == 'M' || status.charAt(1) == 'M') {
		mmc.setSerialPortCommand("COM1","!statusaxis","\r"); 
		status = mmc.getSerialPortAnswer("COM1","\r"); 
		Thread.sleep(100);  // 10 Hz polling rate
	}	
	return 0;
}

int waitForStage(stageName,aim_x_pos,aim_y_pos,travel_speed) {
	cur_x_pos = mmc.getXPosition(stageName);
	cur_y_pos = mmc.getYPosition(stageName);
	x_dist = Math.abs(cur_x_pos - aim_x_pos);
	y_dist = Math.abs(cur_y_pos - aim_y_pos);
	x_t = x_dist / travel_speed;
	y_t = y_dist / travel_speed;
	d_t = (int) Math.ceil(Math.max(x_t,y_t));
	Thread.sleep(d_t);
	return d_t;
}

int coreTravelNoWait(cur_z_pos,aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName) {
	if(cur_z_pos < aim_z_pos)	{ 
		mmc.setPosition(zStageName,aim_z_pos);
		mmc.setXYPosition(stageName,aim_x_pos,aim_y_pos);
	}	else 	{
		mmc.setXYPosition(stageName,aim_x_pos,aim_y_pos);
		mmc.setPosition(zStageName,aim_z_pos);
	}	
	waitForStage(stageName,aim_x_pos,aim_y_pos,travel_speed);
	waitForXY();
	waitForZnew();
	return 0;
}

int coreTravelWait(cur_z_pos,aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName) {
	if(cur_z_pos < aim_z_pos)	{ 
		mmc.setPosition(zStageName,aim_z_pos);
		waitForZnew();
		
		mmc.setXYPosition(stageName,aim_x_pos,aim_y_pos);
		waitForStage(stageName,aim_x_pos,aim_y_pos,travel_speed);
		waitForXY();
	}	else 	{
		mmc.setXYPosition(stageName,aim_x_pos,aim_y_pos);
		waitForStage(stageName,aim_x_pos,aim_y_pos,travel_speed);
		waitForXY();
		
		mmc.setPosition(zStageName,aim_z_pos);
		waitForZnew();
	}	
	return 0;
}

int generalTravel(aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName,wait) {
	
	// sc.message("current time");
	travel_begin= System.currentTimeMillis();
	// sc.message("Setting speed");
	mmc.setProperty(stageName, "SpeedX [mm/s]",travel_speed);
	mmc.setProperty(stageName, "SpeedY [mm/s]",travel_speed);
	// sc.message("Getting positions");
	cur_z_pos = mmc.getPosition(zStageName);	
	if (wait == 0)
		coreTravelNoWait(cur_z_pos,aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName);
	else
		 coreTravelWait(cur_z_pos,aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName);
	Thread.sleep(1000);
	cur_x_pos = mmc.getXPosition(stageName);
	cur_y_pos = mmc.getYPosition(stageName);
	cur_z_pos = mmc.getPosition(zStageName);
	// sc.message("Get positions");
	sc.message("Move result: "+ (cur_z_pos - aim_z_pos) + " " + (cur_x_pos - aim_x_pos) + " " + (cur_y_pos - aim_y_pos));
	travel_end = System.currentTimeMillis();
	travel_t = Math.max(0,Math.round((travel_end - travel_begin))); // ms
	sc.message("Travel took " + travel_t + "ms");			
	return 0;
}

int travelToPosition(aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName) {
	int wait = 1;
	generalTravel(aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName,wait);
	return 0;
}

int travelToPositionRetry(aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName,timeout) {
	int wait = 1;
	start_movetime = System.currentTimeMillis();
	movetime = 0;
	moved = false;
	
	while(!moved && movetime < timeout){
		try {
			generalTravel(aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName,wait);
			moved = true;
		}
		catch(Exception e) {
			moved = false;
			if (movetime > timeout) throw e;
		}
		movetime = (System.currentTimeMillis() - start_movetime)/1000;
	}
	
	return 0;
}

int travelToPositionNoWait(aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName) {
	int wait = 0;
	generalTravel(aim_z_pos,aim_x_pos,aim_y_pos,travel_speed,stageName,zStageName,wait);
	return 0;
}