import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import org.micromanager.data.Datastore;
import org.micromanager.display.DisplayWindow;
import org.micromanager.PositionList;
import org.micromanager.LogManager;
import mmcorej.TaggedImage;
import org.micromanager.data.Image;
import org.micromanager.data.Coords;
import org.micromanager.data.Coordinates;
import org.micromanager.internal.utils.MMException;

source("C:/Users/OPMuser/Documents/micromanager/mmgr-opm-scripts/helpers_debug.bsh");

mmc = mm.getCMMCore();
sc = mm.getScriptController();

// print("In correct file");

// Image while scanning; hardcoded positions for the spheroids
// For FRET timelapse imaging of several fields
// Deleted comments (see in 0.2_one_field)
String zStageName = "ZAxis";
// String zStageName = "ThorZDrive";
String stageName = mmc.getXYStageDevice();
String cam = "pco_camera_bis"; 	
String acq = "acq_rfl"; 	

DateFormat dateFormat = new SimpleDateFormat("yy-MM-dd/HH-mm-ss");
Date date = new Date();

savedir = "E:/movetest_3/" + dateFormat.format(date) + "/";

//straight_dir = savedir;
//reflect_dir = savedir;
new File(savedir).mkdirs();
new File(savedir).mkdirs();

filedir = "E:/acquisition control files/";

sc.message("Cleaning up");
/////////////////////////////////////////////////////////////////////
// Clean everything before beginning
cleanup(cam,"",stageName);
sc.message("Successfully cleaned up");
//sc.message("Test");
// User-defined parameters
/////////////////////////////////////////////////////////////////////

// Time-lapse parameters ////////////////////////////////////////////
	n_run = 1;
	run_interval = 0; // in minutes
	first_run =0; // 0-indexing

// Saving parameters
	save_type = 1;
		// Saving types: 
		// 0 = save after each run
		// 1 = save after each field
	
/////////////////////////////////////////////////////////////////////
// Filter wheel positions and laser channels

// donor exc and em, donor exc and acceptor em, direct acceptor exc and em.
// (count from 0)
int[] fw_pos = {1,2}; //,4}; 
int[] las_channels = {3,2}; // ,0}; // DAQ channels corresponding to each fw pos
int[] wavelengths = {457, 515, 561, 642};
int[] amplitudes = {5,5}; // , 2};
int[] exposures  = {20, 20}; //,8};

PositionList pl = mm.positions().getPositionList();

int n_fields = posCtrNum();
int[] x_pos = new int[n_fields];
int[] y_bg = new int[n_fields];
int[] y_end= new int[n_fields];
int[] f_pos = new int[n_fields];

port_xy = "COM1";

trg_dist = 1.4; //micron

double travel_speed = 10;  // travel speed mms/(?)
double scan_speed = 0.2;  // scan speed mm/s(?)
dist_from_ctr = 200;  // half of the total scan distance in um
movetimeout_s = 60;  // timeout for stage travel
scan_tries = 3;  // general retry count until skipping field

// get array of stage positions for the scan, dist_from_ctr = 
// half of the total scan distance, is measured from centre of y_bg
int ret = convertCtr(f_pos,x_pos,y_bg,y_end,dist_from_ctr,dist_from_ctr);	

// LOG //////////////////////////////////////////////////////////////
BufferedWriter log = new BufferedWriter(new FileWriter(savedir + "log.txt"));
log.write("Start of log date: " + dateFormat.format(date) + "\n");
log.flush();

BufferedWriter debug = new BufferedWriter(new FileWriter(savedir + "debug.txt"));
debug.write("Start of log date: " + dateFormat.format(date) + "\n");
debug.flush();

BufferedWriter errorcount = new BufferedWriter(new FileWriter(savedir + "errorcount.txt"));
errorcount.write("Start of log date: " + dateFormat.format(date) + "\n");
errorcount.flush();
/////////////////////////////////////////////////////////////////////
// Error counts //
move_well_n_err = 0;
setup_n_err = 0;
scan_start_n_err = 0;
scan_end_n_err = 0;

filter_naming = true;
test_mode = true; // delete files after acquiring

// trigger distance (microns) - set this once ///////////////////////
mmc.setSerialPortCommand(port_xy,"!trigd " + trg_dist,"\r");

for (n = 0; n < n_runs; n++){  // runs
	for(f = 0; f < n_fields; f++) {  // fields

		Date date = new Date();
		datestr = dateFormat.format(date);
		log_fieldinfo = "\n" + datestr + " Run: " + n + " Field: " + f + " ";
		debug.write(log_fieldinfo);
		debug.flush();
		
		// Setup files, naming, etc.
		end_dir = "run_" + index + "/field_" + f + "/" + wavelengths[chan];
		
		// if FRET we need to specify filter position so we have unique directories
		// for repeated excitations
		if ( filter_naming ) end_dir = end_dir + "/" + fw_pos[w];
		
		//Initialize Acquisition
		System.gc(); // added 161223 HS

		sc.message("Creating datastore");
		datastore = createDatastore(acq, savedir + end_dir, true);
		
		// set txt files for laser params
		writeToFile(filedir + "las.txt","" + amplitudes[w]);
		writeToFile(filedir + "exp.txt","" + exposures[w]);
		writeToFile(filedir + "fw_pos.txt", "" + fw_pos[w]);
		mmc.setState("FW103H Filter Wheel", fw_pos[w]);
		writeToFile(filedir + "las_channel.txt", "" + las_channels[w]);
		mmc.setExposure(exposures[w]);
		sc.message("Filter position: " + fw_pos[w]);
		
		// Move to start position (x_pos[f] ,y_bg[f], f_pos[f]) /////
		try{
			debug.write("Start pos: ");
			debug.flush();
			// move to start position with retries, times out after movetimeout_s
			travelToPositionRetry(f_pos[f],x_pos[f],y_bg[f],travel_speed,stageName,zStageName,movetimeout_s,debug);
		} catch (Exception e) { 
			// raises a timeout exception
			log.write(log_fieldinfo + "Failed to move to position in time (timeout: " + movetimeout_s + ") " + e.toString() + " ## ");
			log.flush();
			err_out = e;
			move_well_n_err = move_well_n_err + 1;
			// Should I add a time to just, wait? Also clear the serial buffer?
			not_done = true;
			continue;
		}
		// Set trigger, scan speed, etc. for acquisition
		try{
			// retries while checking stage settings are correct
			setUpStageRetry(port_xy,trg_dist,scan_speed,scan_tries,debug);
		} catch (Exception e){
			print("problem setting up stage " + e.toString());
			mmc.setSerialPortCommand(port_xy,"?trigd","\r");
			trigger_dist_serial = mmc.getSerialPortAnswer(port_xy, "\r");
			print(trigger_dist_serial);
			log.write(log_fieldinfo + ", Failed in setUpStage with: " + e.toString() + " ## SKIPPING ##");
			log.flush();
			setup_n_err = setup_n_err + 1; 
			continue;
		}
		
		// allow camera to be triggered by stage //
		mmc.setProperty(cam, "Triggermode","External");  
		// starts frame grabber
		mmc.prepareSequenceAcquisition(cam);
		mmc.startSequenceAcquisition(cam,n_img[f],0,false);
		sc.message("Acq started"); 
		
		// Start the acquisition by moving the stage ////////////////
		try{
			// start the acquisition 
			setXYPositionForAcqRetry(stageName, x_pos[f], y_end[f], scan_tries, debug); // start the move
		} catch (Exception e){
			print("Problem moving stage");
			log.write(log_fieldinfo + ", Stage move failed with: " + e.toString() + " ## SKIPPING ##");
			log.flush();
			scan_start_n_err = scan_start_n_err + 1;
			continue;
		}
		/////////////////////////////////////////////////////////////
		
		// Grab the frames from the camera //////////////////////////
		
		
		
		/////////////////////////////////////////////////////////////
		try{
			debug.write("End pos: ");
			debug.flush();
			end_pos_array = checkXYZWait(stageName, zStageName, x_pos[f], y_end[f], f_pos[f], debug, 50); // check end is correct (debugging)
			debug.write("Scan success");
			debug.flush();
		} catch (Exception e) {
			log.write(log_fieldinfo + "End position error: " + e.toString() + " ## ");
			log.flush();
			err_out = e;  // maybe we should stack the errors but is handled in log so, it's okay
			not_done = true;
			// don't continue, just let loop complete and retry
			scan_end_n_err = scan_end_n_err + 1;
		}

		// combine the debugging and save to the debug log
		// debug.write(log_fieldinfo + move_error_buffer.toString() + dropped_buffer.toString());
		// debug.flush();
	}
}

tot_err = move_well_n_err + setup_n_err + scan_start_n_err + scan_end_n_err;


log.write("\n Ended with " + tot_err + " error(s):\n");
log.write(move_well_n_err + " moving to well error(s)\n");
log.write(setup_n_err + " setting up scan error(s)\n");
log.write(scan_start_n_err + " scan starting error(s)\n");
log.write(scan_end_n_err + " scan end error(s)\n");
log.flush();
