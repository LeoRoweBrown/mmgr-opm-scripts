import jxl.*;
import jxl.write.*;
import jxl.Workbook;
import jxl.Workbook.*;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.lang.System;
import java.io.File;
// import org.micromanager.api.PositionList;
// import org.micromanager.api.MultiStagePosition;
// import org.micromanager.api.StagePosition;

import org.micromanager.PositionList;
import org.micromanager.MultiStagePosition;
import org.micromanager.StagePosition;
import ij.*;
import ij.text.*;
import ij.measure.ResultsTable;
import ij.plugins.*;
import ij.gui.*;
import org.apache.poi;
import org.micromanager.internal.utils.MMException;

////////////////////
// Parameters
// Experiment 
// platemap = "E:\\CRUK\\20200820_CRUK33_fixedDrugs_reimage\\platemap.xls";
// platemap = "E:/accelerator/French_20210705/platemap.xls";
platemap = "T:/IBIN_Nina/20201029_fixedPlate/platemap.xls";


gen_z = false;
uni_z = true;
fields_per_well = 1;// 180301 Hugh changed from 2
field_x_dist = 200; //microns

// Plate format description
n_rows = 16 / 2;
n_cols = 24 / 2;
inter_well_dist = 4500 * 2;
id_offset = 2000;

////////////////////////////////////////// PART 1 - determines a plane using the 3 point method
////////////////////////////////////////// WARNING - x_orig & y_orig are not safe variables - can damage microscope
////////////////////////////////////////// Since we know 3 point method is not best for these plates perhaps better to populate positions with current z-height.
	unset("A");
	pl = mm.positions().getPositionList();
	n = pl.getNumberOfPositions();
	sc = mm.getScriptController();

	if(n == 0){
		throw new MMException("Mark first well (B2) in positions list before generating!");
	}

//	if(n > 0) {
	mpa = pl.getPosition(0);
	float [] A = {mpa.getX() , mpa.getY() , mpa.getZ()};
	xa = (int) Math.floor(mpa.getX()); 
	ya = (int) Math.floor(mpa.getY()); 
//	}	else {
//	mpa = pl.getPosition(0);
//	float [] A = {mpa.getX() , mpa.getY() , mpa.getZ()};
//	xa = (int) Math.floor(mpa.getX()); 
//	ya = (int) Math.floor(mpa.getY()); 
//	}
	
	//int z_pos  = -13000; DONT FORGET TO FIX WELL REFERENCE (DAMAGE MICROSCOPE)!!!
	int x_orig = xa;
	int y_orig = ya;
	int dx     = inter_well_dist;
	int dy     = inter_well_dist;

	//INPUTS
	//-x3 positions on plane - entered manually from 0th, 5th and 59th elements across 60 well plate map
	unset("B");
	unset("C");
	unset("AB");
	unset("AC");
	unset("ABxAC");
	
	// Pull the first three positions in the pl - should be B2, ?, ?
	// Weird things happening with defining / declaring arrays, this is a bodge but it should be ok
	mpb = new PositionList();
	mpc = new PositionList();
	
	if(gen_z) {	
		mpb = pl.getPosition(1);
		mpc = pl.getPosition(2);
	} else {
		mpb = pl.getPosition(0);
		mpc = pl.getPosition(0);	
	}

	float [] B = {mpb.getX(), mpb.getY(),mpb.getZ()};
	float [] C = {mpc.getX(),  mpc.getY(), mpc.getZ()};
	
	// 3 point method
	// two vectors in plane
	float [] AB = {B[0]-A[0], B[1]-A[1], B[2]-A[2]};
	float [] AC = {C[0]-A[0], C[1]-A[1], C[2]-A[2]};
	
	// normal vector to plane
	float [] ABxAC = {AB[1]*AC[2]-AC[1]*AB[2], -AB[0]*AC[2]+AC[0]*AB[2], AB[0]*AC[1]-AC[0]*AB[1]};
	
	// Scalar equation coefficients for plane Ax + By + Cz + D = 0 use C position to solve
	float D = - ABxAC[0]*C[0]-ABxAC[1]*C[1]-ABxAC[2]*C[2];
	// Use to find z values: z = -Ax/C -By/C -D/C

///////////////////////////////////////// Part 2 - read xls file, read from first sheet the wells chosen by '1'

unset("workbook");
unset("myfile");

File myfile=new File(platemap);

Workbook workbook=Workbook.getWorkbook(myfile);   
Sheet sheet=workbook.getSheet(0);

unset("x_pos");
unset("y_pos");

x_pos = new ArrayList();
y_pos = new ArrayList();
z_pos = new ArrayList();

//n_fields   = 60; 
// check all positions in xls file
int Zp;
//for (i = 0; i <= 5; i++) {
for (j = 0; j < n_rows; j++) 
{
	for (i = 0; i < n_cols; i++) 
	{
	//	col = 2*i;

		// row-first boustrophedon
		j_actual = j;
		col = (j_actual % 2 == 1) ? i : (n_cols -1 - i);

		// Column-first boustrophedon (have to also switch the 'for' statement is to be used)
		// If we are in an even column, normal j ; if in an odd, reversed j
		//		col = i;
		//		j_actual = (col % 2 == 1) ? j : (n_rows -1 - j);
		
		t=sheet.getCell(col,j_actual);

		//	sc.message(" " + col + " " + j + " " + j_actual + " " + t.getValue());
		if(t.getValue()>0) // if well position has a 1 associated with it in the xls file then add it to the list
		{ 
			Xc= x_orig - (col-1) * dx;
			Yc= y_orig - (j_actual - 1) * dy;

			for(n = 0; n < fields_per_well; n++) 
			{
				Xp = Xc + (n - (fields_per_well -1)/2.0)*field_x_dist;
				Yp = Yc;
				x_pos.add(Xp);
				y_pos.add(Yp);
				if (uni_z){
					z_pos.add((int)mpa.getZ());
				}
				if (gen_z) 
				{
					Zp = Math.round(-ABxAC[0]*Xp/ABxAC[2]-ABxAC[1]*Yp/ABxAC[2]-D/ABxAC[2]);
					z_pos.add(Zp);
				}
			}
      }
	}
//	col = 2*i+1;
//	for (j = 7; j >= 0; j = j + incr) {
//		t=sheet.getCell(col,j);
//		if(t.getValue()>0){			
	//		Xc= x_orig - (col-1) * dx;			
		//	Yc= y_orig - (j-1) * dy;
			//for(n = 0; n < fields_per_well; n++) {
//				//Xp = Xc + (n - (fields_per_well -1)/2.0)*field_x_dist;
//				Yp = Yc;
//				x_pos.add(Xp);
	//			y_pos.add(Yp);
		//		if (gen_z) {
			//		Zp = Math.round(-ABxAC[0]*Xp/ABxAC[2]-ABxAC[1]*Yp/ABxAC[2]-D/ABxAC[2]);
				//	z_pos.add(Zp);
//				}
		//	}
  //    }
//	}
}
workbook.close();

//////////////////////// Part 3 - convert list of wells to image to positions for XY stage

xyStage = mmc.getXYStageDevice();
zStage = mmc.getFocusDevice();

////////////////////////
// requires user to set well - this code assumes origin set at B2 the 'top left corner' of the plate
// zig zag path starting from B2 - columnwise instead of row 
gen_z = false;
x_pos=x_pos.toArray();
y_pos=y_pos.toArray();
z_pos=z_pos.toArray();
PositionList pl = new PositionList();

sc.message(xyStage);
sc.message(zStage);
sc.message(" " + x_pos.length);

// char[] rows = {'A','B','C','D','E','F','G','H'}; // We cannot acess A or H due to water immersion objective

char[] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();

int[][] label_idx = new int[n_cols][n_rows];

MultiStagePosition msp;

for (i = 0; i<x_pos.length; i++) {
	
	if(gen_z ||  uni_z) {
		msp = new MultiStagePosition(xyStage, x_pos[i], y_pos[i], zStage, z_pos[i]);
	} else {
		msp = new MultiStagePosition();
		StagePosition sp = new StagePosition();
		sp.x = x_pos[i];
		sp.y = y_pos[i];
		sp.stageName = xyStage;
		sp.numAxes = 2;
		msp.setDefaultXYStage(xyStage);
		msp.setDefaultZStage(zStage);		
		msp.add(sp);
	}
	xp=(x_pos[i]-x_orig);
	yp=(y_pos[i]-y_orig);
   x_id = (int) Math.floor((-(xp ) + id_offset) / inter_well_dist) + 2; // add +2 since _orig is in column 2 (0-index)
	y_id = (int) Math.floor((-(yp ) + id_offset) /inter_well_dist) + 1; // add +1 since _orig is in row B
	// print(y_id);
	// print(x_id);
	if (y_id >= n_rows ){
		throw new ArrayIndexOutOfBoundsException("Number of rows doesn't agree with platemap");
	}
	if (x_id >= n_cols ){
		throw new ArrayIndexOutOfBoundsException("Number of columns doesn't agree with platemap");
	}
	label = "Row " + alphabet[y_id] + " Column " + x_id + " Field " + label_idx[x_id][y_id]; 
	label_idx[x_id][y_id] = label_idx[x_id][y_id] + 1;
	msp.setLabel(label);
	pl.addPosition(msp);
}

mm.positions().setPositionList(pl);

        
