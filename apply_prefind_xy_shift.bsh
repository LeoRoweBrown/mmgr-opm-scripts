// load x y z shifts from prefind and apply to positions list
import org.micromanager.PositionList;
import org.micromanager.StagePosition;
import org.micromanager.MultiStagePosition;

path = "E:/nina/20221125_live_plate4/prefind_output/22-11-25/16-57-44/";
csv_path = path + "prefind_shifts.csv";
csv_rejection_path = path + "manual_reject.csv";



import org.micromanager.PositionList;
import org.micromanager.internal.utils.MMException;
import java.lang.*;
import java.util.*;

PositionList pl = mm.positions().getPositionList();
n_pos = pl.getNumberOfPositions();

xyStage = "XYStage";
zStage = "ZAxis";

// Double[] x_shift = new Double[n_pos];
// Double[] y_shift = new Double[n_pos];
// Double[] z_shift = new Double[n_pos];

int x_shift = 0;
int y_shift = 0;
int z_new = 0;

apply_z = false;

rejections = true;


BufferedReader br = new BufferedReader(new FileReader(csv_path));
String line = new String();


BufferedReader br_rej = new BufferedReader(new FileReader(csv_rejection_path));
String line_rej = new String();

PositionList pl_new = new PositionList();
MultiStagePosition msp;
n = 0;
i = 0;
while ((line = br.readLine()) != null) {
	// get current pos
	mp = pl.getPosition(n);
	label = mp.getLabel();
	
	String[] values = line.split(",");
	//print(values[0]);
	Double.parseDouble(values[0]);

	if (rejections){
		line_rej = br_rej.readLine();  // rejection
		if (line_rej.equals("0")){
			print("Removing " + label);
			n++;
			// print(i);
			continue;
		}
	}
	
	//print((int) Math.floor(Double.parseDouble(values[0])));
	x_shift = (int) Math.floor(Double.parseDouble(values[0]));
	y_shift = (int) Math.floor( Double.parseDouble(values[1]));
	if (apply_z){
		z_new = (int) Math.floor(Double.parseDouble(values[2]));
	}
	else{
		z_new = (int) Math.floor(mmc.getPosition(zStage)); 
	}

	// get current pos
	x_i = (int) Math.floor(mp.getX()); 
	y_i = (int) Math.floor(mp.getY());  
	x_new = x_i - x_shift;
	y_new = y_i - y_shift;

	print(label + " x_new: " + x_new + " y_new: " + y_new + " z_new: " + z_new);
	
	msp = new MultiStagePosition(xyStage, x_new, y_new, zStage, z_new);
	msp.setLabel(label);
	pl_new.addPosition(msp);
	n++;
}

mm.positions().setPositionList(pl_new);