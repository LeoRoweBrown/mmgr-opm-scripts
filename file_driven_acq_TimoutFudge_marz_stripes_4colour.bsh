// File-driven acquisition for one cam, auto filter wheel and 4 colours
// Not much different to normal one cam but set up for fixed sample FRET
// use version 8/9 of the labview
// One trigger loop for all fields

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import org.micromanager.data.Datastore;
import org.micromanager.display.DisplayWindow;
import org.micromanager.PositionList;
import org.micromanager.LogManager;
import mmcorej.TaggedImage;
import org.micromanager.data.Image;
import org.micromanager.data.Coords;
import org.micromanager.data.Coordinates;

source("C:/Users/OPMuser/Documents/micromanager/scripts_for_2_0_4colour/helpers.bsh");

// import org.micromanager.ScriptController;

// since sc.message -> sc.message
// studio class is mm in beanshell scripting:
mmc = mm.getCMMCore();
sc = mm.getScriptController();

// print("In correct file");

// Image while scanning; hardcoded positions for the spheroids
// For FRET timelapse imaging of several fields
// Deleted comments (see in 0.2_one_field)
String zStageName = "ZAxis";
// String zStageName = "ThorZDrive";
String stageName = mmc.getXYStageDevice();
String cam = "pco_camera_bis"; 	
String acq = "acq_rfl"; 	

DateFormat dateFormat = new SimpleDateFormat("yy-MM-dd/HH-mm-ss");
Date date = new Date();

savedir = "E:/accelerator/20220311_Saiah02_fret_singleCam/" + dateFormat.format(date) + "/";

//straight_dir = savedir;
//reflect_dir = savedir;
new File(savedir).mkdirs();
new File(savedir).mkdirs();

filedir = "E:/acquisition control files/";

term = "\r";
sc.message("Cleaning up");
/////////////////////////////////////////////////////////////////////
// Clean everything before beginning
cleanup(cam,"",stageName);
sc.message("Successfully cleaned up");
//sc.message("Test");
// User-defined parameters
/////////////////////////////////////////////////////////////////////

// Position paramters
	use_ctr = true;
	dist_from_ctr = 50; //in microns
	
	first_field = 0; // 0-indexing
	unset("z_offset");
	z_offset = 0;//-100000;
	y_offset = 0;

// Triggering parameters
	acq_type = 1;
		// Acquisition types: 
		// 0 = Fret
		// 1 = Alternate
		// 2 = Simultaneous

	filter_naming = 1;

	trg_dist = 1.4; //micron
	// Positions are in microns, exp. in ms, speed in mm/s = microns/ms. nimg is n. of images.
	double scan_speed = 0.2; // microns/ms
	
	// in this script should be just one exposure time for the one camera, hasn't been updated
	// exp1 = 10; //ms 
	// exp2 = 10; //ms
	
	// las1 = 5; //las 1 
	// las2 = 5; //las 2
	// added for the 4 colour
	// las3 = 5; //las 3 
	//las4 = 5; //las 4

// Time-lapse parameters
	n_run = 1;
	run_interval = 0; // in minutes
	first_run =0; // 0-indexing

// Saving parameters
	save_type = 1;
		// Saving types: 
		// 0 = save after each run
		// 1 = save after each field
	
/////////////////////////////////////////////////////////////////////
// Filter wheel positions and laser channels

// donor exc and em, donor exc and acceptor em, direct acceptor exc and em.
int[] fw_pos = {5, 3, 3, 1};
// double fw_angle = 60.0; // angle between filter wheel positions
int[] las_channels = {0, 0, 1, 3}; // DAQ channels corresponding to each fw pos
int[] wavelengths = {488, 515, 561, 642};
int[] amplitudes = {5, 5, 5, 5};
int[] exposures  = {2, 2, 2, 2};

if ( fw_pos.length != las_channels.length ){
	throw new MMException("Laser channels array not same length as filter wheel positions array");
}
	
/////////////////////////////////////////////////////////////////////
// Constants

double travel_speed = 10.;

int[] x_lim = {-12000000,1000000};
int[] y_lim = {-12000000,1000000};

inter_dist = 10000; // microns

inter_time = 3000;

/////////////////////////////////////////////////////////////////////	
//writeToFile("E:/acquisition control files/las2.txt", "0.5");
sc.message("Writing files");

writeToFile(filedir + "acqType.txt","" + acq_type);
// writeToFile(filedir + "las2.txt","" + 0);
writeToFile(filedir + "las.txt","" + amplitudes[0]);
writeToFile(filedir + "exp.txt","" + exposures[0]);
// writeToFile(filedir + "exp2.txt","" + 0);
writeToFile(filedir + "delay.txt","" + (trg_dist / (2.*scan_speed)));
writeToFile(filedir + "run.txt","0");
writeToFile(filedir + "fw_pos.txt", "0");
writeToFile(filedir + "las_channel.txt", "");
writeToFile(filedir + "finished.txt", "0");

/////////////////////////////////////////////////////////////////////
unset("x_pos");
unset("y_bg");
unset("y_end");
unset("f_pos");

// for stripes
int opm_angle = 35;
double stripe_overlap = 0.05;

// generate positions (snaked) //
double[] params = {opm_angle, stripe_overlap};
int[][] posArray = convertCtrStripesSnake(params);

savePosToFile(savedir + "stripe_positions.csv", posArray);

int[] f_pos = posArray[0];
int[] x_pos = posArray[1];
int[] y_bg = posArray[2];
int[] y_end = posArray[3];

int n_fields = f_pos.length;

//return;

/* int n_fields = posCtrNum();
int[] x_pos = new int[n_fields];
int[] y_bg = new int[n_fields];
int[] y_end= new int[n_fields];
int[] f_pos = new int[n_fields];

if (use_ctr) {
	int ret = convertCtr(f_pos,x_pos,y_bg,y_end,dist_from_ctr,dist_from_ctr);	
} else {
	int ret = convertPos(f_pos,x_pos,y_bg,y_end);
	n_fields = posNum();
} */

if (n_fields == 0){
	throw new Exception("Empty position list!");
}

// Positions in microns

u1 = checkPos(x_pos, x_lim);
u2 = checkPos(y_bg, y_lim);
u3 = checkPos(y_end, y_lim);
if((u1+u2+u3) != 0) {
     throw new MMException("Position errors");
}

unset("n_img");
int[] n_img = new int[n_fields];
java.util.Arrays.fill(n_img, 0);

n_tot_img = 0;

for(i = 0;i< n_fields;i++) {
	y_end[i] = y_end[i] + y_offset;
	y_bg[i] = y_bg[i] + y_offset;
	f_pos[i] = f_pos[i] + z_offset;
	n_img[i] = (int) Math.ceil((double) (((double) y_end[i]) - ((double) y_bg[i])) / ((double) trg_dist)); 
	n_tot_img = n_tot_img + n_img[i];
};

// A bit of room in case of fail
n_run_img = n_tot_img + n_fields;
sc.message("" + n_run_img); 

///////////////////////////////////////////////////////////////////////////
// Save parameters

BufferedWriter out = new BufferedWriter(new FileWriter(savedir + "parameters.txt"));     
out.write("n_run ; " + n_run + "\n");
out.write("run_interval ; " + run_interval + "\n");
out.write("trg_dist ; " + trg_dist + "\n");

out.write("exp");
	for(i = 0;i< exposures.length;i++) {
		out.write(" ; " + exposures[i]); 
	}
out.write("\n" + "las");
		for(i = 0;i< amplitudes.length;i++) {
		out.write(" ; " + amplitudes[i]); 
	} 
out.write("\n" + "wavelength");
	for(i = 0;i< wavelengths.length;i++) {
	out.write(" ; " + wavelengths[i]); 
} 
out.write("\n" + "las_channels");
	for(i = 0;i< las_channels.length;i++) {
	out.write(" ; " + las_channels[i]); 
} 
out.write("\n" + "scan_speed ; " + scan_speed + "\n");
out.write("travel_speed ; " + travel_speed + "\n");
out.write("x_pos");
	for(i = 0;i< n_fields;i++) { 	out.write(" ; " + x_pos[i]); }; 
out.write("\n y_bg");
	for(i = 0;i< n_fields;i++) { 	out.write(" ; " + y_bg[i]); };
out.write("\n y_end");
	for(i = 0;i< n_fields;i++) { 	out.write(" ; " + y_end[i]); };
out.write("\n f_pos");
	for(i = 0;i< n_fields;i++) { 	out.write(" ; " + f_pos[i]); };
out.write("\n");

out.close();

///////////////////////////////////////////////////////////////////////////

	mmc.setCameraDevice(cam);
		w = (int) mmc.getImageWidth();
		h = (int) mmc.getImageHeight();
		d = (int) mmc.getBytesPerPixel();
		iD = (int) mmc.getImageBitDepth();
	// mmc.setExposure(exp1);
		
	// mmc.setCameraDevice(cam_str);
	// mmc.setExposure(exp2);

	// Increase focus drive speed, decrease number of microsteps (now done in the device adapter)
	sc.message("Focus");
	setUpFocus();
	sc.message("Focus done");
	mmc.setSerialPortCommand("COM1","!trig 0",term); 
	sc.message("Travel");
	travelToPosition(f_pos[0],x_pos[0],y_bg[0],travel_speed,stageName,zStageName);
	
	sc.message("Initializing buffer"); 
	mmc.initializeCircularBuffer();

new ij.gui.WaitForUserDialog("Configure the LabView program","Activate!").show();
	
for(index = first_run; index < n_run; index++) {
	sc.message("Starting run loop");
	
	time_begin = System.currentTimeMillis();
	sc.message("Time : " + time_begin); 

	//Stop the triggger
	mmc.setSerialPortCommand("COM1","!trig 0",term); 
	// Move to the first position
	travelToPosition(f_pos[0],x_pos[0],y_bg[0],travel_speed,stageName,zStageName);

	// int[] ctrs = {0,0,0}; // Total number of images acquired, counter for reflect cam, counter for straight cam 
	int ctr = 0; // Number of images

	if (save_type == 0) {
		throw(new NotImplementedException("Not supporting save after run in MM2 yet"));
		// initAcq(n_reflect_img,cam_rfl,n_straight_img,cam_str,ctrs);
	}
		
	last_five_occur = System.currentTimeMillis();

	
// loop for fields
for(f = 0; f < n_fields; f++) {
	// loop for filter wheels
	for (w = 0; w < fw_pos.length; w++) { 
	// define here so in scope
	chan = las_channels[w];
	sc.message("Channel: " + chan);
	
	Datastore datastore;

   Coords.Builder coordsBuilder = Coordinates.builder();
   
    // set txt files for laser params
	writeToFile(filedir + "las.txt","" + amplitudes[w]);
	writeToFile(filedir + "exp.txt","" + exposures[w]);
	writeToFile(filedir + "fw_pos.txt", "" + fw_pos[w]);
	writeToFile(filedir + "las_channel.txt", "" + las_channels[w]);
	mmc.setExposure(exposures[w]);
	sc.message("Filter position: " + fw_pos[w]);
	
	// move back to start position for each channel
	travelToPosition(f_pos[f],x_pos[f],y_bg[f],travel_speed,stageName,zStageName);
	
	if (save_type == 1) {

		// LRB - FRET removed, single cam acq only
		// we supply labVIEW with the filter wheel angle in degrees
		// fw_pos_angle = fw_angle * (double)fw_pos[w];  // should coerce ?
		end_dir = "run_" + index + "/field_" + f + "/" + wavelengths[chan];
		
		// if FRET we need to specify filter position so we have unique directories
		// for repeated excitations
		if (filter_naming == 1) end_dir = end_dir + "/" + fw_pos[w];
		
		//Initialize Acquisition
	    System.gc(); // added 161223 HS

		mmc.setProperty(cam, "Triggermode","External");	
		sc.message("Creating datastore");
		
		datastore = createDatastore(acq, savedir + end_dir);
	
		mmc.setProperty(cam, "Triggermode","External");
		
		travelToPosition(f_pos[f],x_pos[f],y_bg[f],travel_speed,stageName,zStageName);
		
		mmc.prepareSequenceAcquisition(cam);
		mmc.startSequenceAcquisition(cam,n_img[f],0,false);
		sc.message("Acq started"); 
		
		// supply labview with the start command as well as
		// the correct filter wheel position for the corresponding
		// wavelength
		labviewFileAcqStart(filedir);
		sc.message("Created files");
		ctr = 0;
/* 		ctrs[0] = 0; // end ctr 
		ctrs[1] = 0; // c1 ctr
		ctrs[2] = 0; // c2 ctr */
	}
	// sc.message(datastore_rfl);
	// sc.message(datastore_str);
	// print("printing counters");
	// print(ctrs);
	// ctrs[0];
	// If we save for each field, ctrs[0] is reset every time
	cond = ctr + n_img[f] ;
	
	// Set-up the position-synchronised trigger
	setUpStage(trg_dist,scan_speed);	
	// Clear the images which may be left
	mmc.clearCircularBuffer();
	// Begin to move the stage
	sc.message("moving to x=" + x_pos[f] + " y= " + y_end[f]);
	mmc.setXYPosition(stageName, x_pos[f], y_end[f]);	//pos[f].fin_x, pos[f].fin_y);
	timeBeginImaging = System.currentTimeMillis();

	TicToc=1000;
	HangExit=0;
	// Poll the images
	//while((mmc.isSequenceRunning(cam_rfl) || mmc.isSequenceRunning(cam_str) || c1 < end_count + n_img[f] || c2 < 2*(end_count + n_img[f]))) {
	Tic=System.currentTimeMillis();

	while((ctr < cond) && (HangExit==0)) {

		Toc=System.currentTimeMillis();

		if ( ( Toc-Tic ) < TicToc ) 
		{
			
			if (mmc.getRemainingImageCount() > 0) {
				TaggedImage img = mmc.popNextTaggedImage();	
				camName = img.tags.getString("Camera");			
				if (camName.equals(cam)) {
					// replace with putImage
					// mm.data().convertTaggedImage(img);
					Image tmp = mm.data().convertTaggedImage(img);
					// print("Test print for datastore putImage");
					// print(tmp.getMetadata().getImageNumber());
					// print("Height");
					// print(tmp.getHeight());
					// p is stage position i.e. image number in stack
					coordsBuilder = coordsBuilder.p(ctr);
					tmp = tmp.copyAtCoords(coordsBuilder.build());
					
					datastore.putImage(tmp);
					// gui.addImageToAcquisition(acq_rfl, ctrs[1], 0, 0,0,img);
					ctr++;
					Tic=System.currentTimeMillis();
				} 
			}
			
		} else {
			HangExit=1;
		}
		
	}

	if ( HangExit==1 ){
		sc.message("Acquisition Hanged, frames missing");
	}
	
	timeEndImaging = System.currentTimeMillis();
	delta_t = timeEndImaging - timeBeginImaging; // seconds
	sc.message("Time spent imaging " + delta_t + "ms");	
		
	
	// sc.message("test " + ctrs[1] + " " + cond_rfl + " " +  ctrs[2] + " " + cond_str);

	// Stop the triggger
	mmc.setSerialPortCommand("COM1","!trig 0",term); 

	ctr = ctr + n_img[f];
	
	// Finalize saving?
	if (save_type == 1)
		//Stop labVIEW
		
		labviewFileAcqStop(filedir);
		
		//Stop acquisition 
		timeBeginStopLabVIEW = System.currentTimeMillis();	
		mmc.stopSequenceAcquisition(cam); //stop in MM

		timeEndStopLabVIEW = System.currentTimeMillis();
		//mmc.setProperty(cam_rfl, "Triggermode","Internal"); // stop in the camera
		//mmc.setProperty(cam_str, "Triggermode","Internal"); // stop in the camera
		
		delta_t = timeEndStopLabVIEW - timeBeginStopLabVIEW; // seconds
		sc.message("Time spent after saving " + delta_t + "ms");	

		// finalize saving of the datastores //
		sc.message("Freezing (saving) datastores...");
		try {
			datastore.freeze();
			datastore.close();
		}catch(NullPointerException nullPointer){
			print("Problem getting images from camera, triggering problem?");
			throw nullPointer;
		}
		//gui.getAcquisition(acq_str).promptToSave(false);
		//ij.IJ.run("Close");
		//gui.getAcquisition(acq_rfl).promptToSave(false);
		//ij.IJ.run("Close");  
		
	sc.message("Field " + f + " wavelength " + wavelengths[chan] +  "nm acquired!");	

// Delayed restart
//	cur_stat = (f+1) / 5;
//	time_end = System.currentTimeMillis();
//	delta_t = Math.max(0,Math.round((time_end - last_five_occur)/1000)); // seconds
//	if((f+1) == cur_stat * 5) {
//		Thread.sleep(1000*(150 - delta_t));  // wait 2.5 minutes every 5 wells
//		last_five_occur = System.currentTimeMillis();
//	}
	}
	sc.message("Finished filter loop");
	// Move to the next position
	g = f < (n_fields-1) ? f+1 : 0;
	travelToPosition(f_pos[g],x_pos[g],y_bg[g],travel_speed,stageName,zStageName);
	// haven't updated for MM2 yet //
	}
	if (save_type == 0){
		throw(new NotImplementedException("Not supporting save after run in MM2 yet"));
		// closeAndSaveAcq(acq_rfl,cam_rfl,reflect_dir, acq_str,cam_str,straight_dir,index,0,save_type);
	}	
	sc.message("Run " + index +  " acquired!");	
	time_end = System.currentTimeMillis();
	delta_t = Math.max(0,Math.round((time_end - time_begin)/1000)); // seconds
	sc.message("Total took " + delta_t + "s");		
	// Delayed restart - wait until next scheduled run, don't wait in the last one
	if(index < (n_run-1) ) {
		Thread.sleep(1000*(60*run_interval - delta_t));  
	}	
}

// Cleans up after itself (good dog)
cleanup(cam,"",stageName);
writeToFile(filedir + "finished.txt", "1");
sc.message("Fini ! t =" + (System.currentTimeMillis()/60000));
