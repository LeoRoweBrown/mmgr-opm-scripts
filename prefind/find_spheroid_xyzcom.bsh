// open("C:\\Users\\OPMuser\\Desktop\\DELETEME2\\MMStack_Default.ome.tif");
// run("Duplicate...", "duplicate");

import ij.plugin.Duplicator;
import ij.IJ;

int[] find_spheroid_xycom(ImagePlus imp, trg_dist, maxX, maxY){
	// if use_otsu = false, we compute manual threshold
	// print("start bits " + imp.bitDepth);
	comY = 0;
	comX = 0;
	
	// do we need to think about mag being squared here for xz plane?
	mag = 20.4*1.34;  // 20.4 number calculated somewhere...
	px_size_um = 6.5;
	
	fi = imp.getOriginalFileInfo();  // need original file info apparently
	h = imp.getHeight();
	w = imp.getWidth();
	nSlices = imp.getNSlices();
	
	y_spacing = trg_dist;
	// print("y spacing: " + y_spacing + "um");

	IJ.run(imp, "Rotate 90 Degrees Left", "");
	IJ.run(imp, "Set Scale...", "distance=1 known=1 pixel=1 unit=Âµm");


	imp.setRoi(8, 0, 992, 1280);  // do processing on imp2, keep imp
	imp.crop();
	IJ.run("Clear Results");
	IJ.run("Set Measurements...", "mean min max redirect=None");
	IJ.run(imp, "Measure", "");
	rt = ResultsTable.getResultsTable();
	// some extra help subtracting mean, help with otsus and CoMs
	stack_mean = rt.getValue("Mean",0);
	print("subtracting " + stack_mean);
	IJ.run(imp, "Subtract...", "value="+stack_mean+" stack");
	// Thread.sleep(1000);
	
	imp2 = new Duplicator().run(imp);
	// Thread.sleep(1000);

	IJ.run(imp2, "Z Project...", "projection=[Max Intensity]");
	// unfortunately can't avoid the Z project appearing in new window,
	// is there a workaround? Means I have to use getImage.
	imp2.close();
	imp2 = IJ.getImage();
	// Thread.sleep(1000);
	
	imp2.setRoi(0, 0, 992, 1280);

	// can do x with the MIP
	IJ.run("Clear Results");
	IJ.run("Set Measurements...", "mean min max center redirect=None");
	IJ.run(imp2, "Measure", "");  // measure CoM of otsu of MIP projection (imp2)
	rt = ResultsTable.getResultsTable();
	comX = rt.getValue("YM",0);  // we rotated our image, so YM.
	middle_x = w/2;
	comX = comX - middle_x;  // need to work out signs of this shift in stage coords
	//print("comX in pixels");
	// now do Z
	comZ = rt.getValue("XM",0);
	print("comZ in pixels = " + comZ);
	comZ -= h/2;
	comZ = 10*comZ*Math.sin(35*Math.PI/180)*px_size_um/mag;
	print("comZ in um*10 = " + comZ);
	
	// y needs to look at stack

	imp_ots = new Duplicator().run(imp);  // annoying workaround for autothresholder converting to 8bit
	IJ.run(imp_ots, "Auto Threshold", "method=Otsu white setthreshold show stack use_stack_histogram");
	imp_ots.changes = false;
	imp_ots.close();
	
	logString = IJ.getLog();
	logArray = logString.split("\n");
	otsustr = logArray[logArray.length-1];
	otsu_val_stack = otsustr.split(": ");
	otsu_val_stack_int = Integer.parseInt(otsu_val_stack[1]);

	IJ.run(imp, "Subtract...", "value="+otsu_val_stack_int+" stack");  // easiest way to "threshold mask"
	// IJ.saveAs(imp, "Tiff", savedir+"/is8bit.tif");
	IJ.run("Clear Results");
	IJ.run("Set Measurements...", "mean min max center redirect=None");
	// int[] sum_z = new int[nSlices];
	y_times_value = 0;
	sum_value = 0;
	IJ.run("Clear Results");
	for (y = 0; y < nSlices; y++){
		imp.setSlice(y+1);
		IJ.run(imp, "Measure", "");
		value = rt.getValue("Mean", y);
		sum_value += value;
		y_times_value += y*value;
	}
	print("comX in pixels: " + comX);
	comY = y_times_value/sum_value;
	middle_y = (nSlices/2 - 1); //we've been counting from zero;
	comY -= middle_y;  // need to work out signs of this shift in stage coords
	// print("comY in slices: " + comY);
	comY *= y_spacing;  // get real distances

	///---------
	
	comX *= px_size_um/mag;
	print("comX in um: " + comX);
	print("comY in um: " + comY);
	
	imp.changes = false;
	imp.close();
	
	imp2.changes = false;
	imp2.close();
	
	if (Math.abs(comX) > maxX){
		print("Exceeded max x shift, limiting to " + maxX + "um");
		comX = comX * (maxX/Math.abs(comX));
	}
	if (Math.abs(comY) > maxY){
		print("Exceeded max y shift, limiting to " + maxY + "um");
		comY = comY * (maxY/Math.abs(comY));
	}

	return new int[]{comX, comY};
}

